{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["greeterAddress","Header","Instructions","TableInstructions","href","target","App","useState","greeting","setGreetingValue","requestAccount","a","window","ethereum","request","method","provider","ethers","providers","Web3Provider","signer","getSigner","contract","Contract","Greeter","abi","setGreeting","transaction","wait","fetchGreeting","greet","data","alert","console","log","className","onClick","onChange","e","value","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"spVAKMA,EAAiB,6CAEvB,SAASC,IACP,OAAQ,iHAGV,SAASC,IACP,OAAQ,8BAAK,yJAGf,SAASC,IACP,OACA,gCACE,kCACA,+BACE,oDACA,6BAAI,mBAAGC,KAAK,uBAAuBC,OAAO,SAAtC,4CAEN,+BACE,oDACA,6BAAI,mBAAGD,KAAK,6BAA6BC,OAAO,SAA5C,0CA0DKC,MApDf,WACE,MAAqCC,mBAAS,IAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KADa,SAGEC,IAHF,2EAGb,sBAAAC,EAAA,sEACQC,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,wBAD1C,4CAHa,kEAOb,kCAAAJ,EAAA,yDACOH,EADP,oDAEiC,qBAApBI,OAAOC,SAFpB,iCAGUH,IAHV,cAIUM,EAAW,IAAIC,IAAOC,UAAUC,aAAaP,OAAOC,UACpDO,EAASJ,EAASK,YAClBC,EAAW,IAAIL,IAAOM,SAASvB,EAAgBwB,EAAQC,IAAKL,GANtE,UAO8BE,EAASI,YAAYlB,GAPnD,eAOUmB,EAPV,OAQIlB,EAAiB,IARrB,UASUkB,EAAYC,OATtB,QAUIC,IAVJ,6CAPa,+BAqBEA,IArBF,2EAqBb,gCAAAlB,EAAA,yDACgC,qBAApBC,OAAOC,SADnB,wBAEUG,EAAW,IAAIC,IAAOC,UAAUC,aAAaP,OAAOC,UACpDS,EAAW,IAAIL,IAAOM,SAASvB,EAAgBwB,EAAQC,IAAKT,GAHtE,kBAKyBM,EAASQ,QALlC,cAKYC,EALZ,yBAMaC,MAAMD,IANnB,kCAQME,QAAQC,IAAK,UAAb,MARN,2DArBa,sBAkCb,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAClC,EAAD,IACA,cAACC,EAAD,IACA,cAACC,EAAD,IACA,8BAAK,wBAAQiC,QAASP,EAAjB,2BACL,8BAAK,wBAAQO,QAzCN,2CAyCF,4BACL,8BAAK,uBACHC,SAAU,SAAAC,GAAC,OAAI7B,EAAiB6B,EAAEjC,OAAOkC,QACzCC,YAAY,aACZD,MAAO/B,YChEFiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.86fee2e2.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { ethers, providers } from 'ethers';\nimport './App.css';\nimport Greeter from './artifacts/contracts/Greeter.sol/Greeter.json'\n\nconst greeterAddress = \"0x0dFCaDd0C1D0FD8E0c82E829Db0D78d9447a2F9A\"\n\nfunction Header() {\n  return (<h3>The goal of this Dapp in to write and read from the Ropsten Testnet Blockchain!</h3>)\n}\n\nfunction Instructions() {\n  return (<div><p>For you to be able to use this aplication, you will need a Metamask connected to the Ropsten Tesnet and some fake ETH:</p></div>)\n}\n\nfunction TableInstructions() {\n  return (\n  <table>\n    <tbody>\n    <tr>\n      <td>Donwload Metamask:</td>\n      <td><a href=\"https://metamask.io/\" target=\"_blank\">Metamask Official Website</a></td>\n    </tr>\n    <tr>\n      <td>Get some fake ETH:</td>\n      <td><a href=\"https://faucet.ropsten.be/\" target=\"_blank\">Ropsten ETH faucet</a></td>\n    </tr>\n    </tbody>\n  </table>)\n}\n\nfunction App() {\n  const [greeting, setGreetingValue] = useState('')\n\n  async function requestAccount() {\n    await window.ethereum.request({ method: 'eth_requestAccounts' })\n  }\n\n  async function setGreeting() {\n    if (!greeting) return\n    if (typeof window.ethereum !== 'undefined'){\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, signer)\n      const transaction = await contract.setGreeting(greeting)\n      setGreetingValue('')\n      await transaction.wait()\n      fetchGreeting()\n    }\n  }\n\n  async function fetchGreeting () {\n    if(typeof window.ethereum !== 'undefined'){\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, provider)\n      try {\n        const data = await contract.greet()\n        return(alert(data))\n      } catch (err) {\n        console.log (\"Error: \", err)\n      }\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header />\n        <Instructions />\n        <TableInstructions />\n        <div><button onClick={fetchGreeting}>Read String</button></div>\n        <div><button onClick={setGreeting}>Write String</button></div>\n        <div><input\n          onChange={e => setGreetingValue(e.target.value)}\n          placeholder=\"New string\"\n          value={greeting} \n        /></div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}